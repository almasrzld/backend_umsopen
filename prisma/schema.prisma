generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  v        Int    @map("__v")
  email    String @unique(map: "email_1")
  username String
  password String

  @@map("admins")
}

model Counter {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  v    Int    @map("__v")
  name String @unique
  seq  Int

  @@map("counters")
}

model Category {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  name      String      @unique           
  label     String?                         
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  participants Participant[] @relation("CategoryParticipants")
  bagans       Bagan[]       @relation("CategoryBagans")
}

model Participant {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  v                 Int      @map("__v")
  user_kode         String?  @unique
  orderId           String?
  user_name         String?
  user_email        String?
  user_phone        String?
  categoryId        String?   @db.ObjectId   
  category          Category? @relation("CategoryParticipants", fields: [categoryId], references: [id])
  user_institution  String?
  user_message      String?
  status            transactions_status
  photo             String?
  snap_token        String?             
  snap_redirect_url String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())

  @@index([createdAt], map: "createdAt_idx")
  @@map("participant")
}

enum transactions_status {
  PENDING_PAYMENT
  PAID
  CANCELED
}

model Bagan {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  round        Int
  indexInRound Int
  categoryId   String?      @db.ObjectId
  category     Category?    @relation("CategoryBagans", fields: [categoryId], references: [id])
  participant1 String?
  participant2 String?
  winner       String?
  score1       Int?
  score2       Int?
  win_method   WinMethod?
  status       MatchStatus @default(SCHEDULED)
  isSemifinal  Boolean?    @default(false)
  isThirdPlace Boolean?    @default(false)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@index([categoryId])
  @@map("bagans")
}

enum MatchStatus {
  SCHEDULED
  ONGOING
  COMPLETED
}

enum WinMethod {
  POINTS
  KO
  WO
  DRAW
}